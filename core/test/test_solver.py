import pytest
import griddlers
import test_utils
import numpy as np
import json
import copy

class TestSolver(object):

	def test_normal_solve(self):
		s = griddlers.Solver(griddlers.strategies.NaiveStrategy)
		b = griddlers.Board(4, 4, [ [3], [1,1], [2], [1] ], [ [2], [1], [3], [2] ] )

		exp = test_utils.build_board([ "1110", "1010", "0011", "0001" ])

		res = s.solve(b)
		assert res['status'] == 'success'
		assert len(res['iterations']) == 2
		assert np.all(res['iterations'][-1]['board']['matrix'] == exp.matrix)


	def test_normal_run_from_partial_board(self):
		s = griddlers.Solver(griddlers.strategies.NaiveStrategy)
		b = griddlers.Board(4, 4, [ [3], [1,1], [2], [1] ], [ [2], [1], [3], [2] ] )

		st = griddlers.strategies.NaiveStrategy(b)
		st.advance()

		exp = test_utils.build_board([ "1110", "1010", "0011", "0001" ])

		res = s.solve(b)
		assert res['status'] == 'success'
		assert len(res['iterations']) == 1
		assert np.all(res['iterations'][-1]['board']['matrix'] == exp.matrix)


	def test_stops_after_num_iters(self):
		board_str = "{\"matrix\":[[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444],[0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444,0.0044444444444444444]],\"constraints\":{\"rows\":[[5],[2,2,2],[1,1,1],[2,2],[1,1,2],[1,1,1,2],[1,2,1,2],[1,2,1,1],[1,2,1,2,3],[1,2,1,1,1],[1,2,3],[9],[1,1],[2,2],[1,1]],\"columns\":[[6],[2,1],[3,4,1],[1,4,1],[1,1,1,2],[1,6,1],[3,3],[2,1],[1,2,1,1],[1,5],[2,1,1],[1,3,2],[2,1],[5],[2]]}}"

		b = griddlers.Board.deserialize(json.loads(board_str))
		s = griddlers.Solver(griddlers.strategies.ProbsStrategy, request_params={'max-iters': 5, 'avg-change-threshold': 0})
		res = s.solve(b)
		assert res['status'] == 'partially-success'
		assert len(res['iterations']) == 5
		assert res['iterations'][-1]['stats']['pct_certain'] < 1

		b = griddlers.Board.deserialize(json.loads(board_str))
		s = griddlers.Solver(griddlers.strategies.ProbsStrategy, request_params={'max-iters': 10, 'avg-change-threshold': 0})
		res = s.solve(b)
		assert res['status'] == 'partially-success'
		assert len(res['iterations']) == 10
		assert res['iterations'][-1]['stats']['pct_certain'] < 1


	def test_stops_if_illegal_board_on_begining(self):
		b = griddlers.Board(3,3, [[4],[],[]], [[],[],[]])
		assert b.is_legal() == False

		s = griddlers.Solver(griddlers.strategies.NaiveStrategy)
		with pytest.raises(ValueError) as ex:
			res = s.solve(b)
		assert str(ex.value) == 'given board is illegal'

	def test_stops_if_illegal_board_while_running(self):
		always_illegal_Board = copy.deepcopy(griddlers.Board)
		always_illegal_Board.first_time = True
		def illegal_from_second_time(self):
			if self.first_time:
				self.first_time = False
				return True
			else:
				return False
		always_illegal_Board.is_legal = illegal_from_second_time

		b = always_illegal_Board(4, 4, [ [3], [1,1], [2], [1] ], [ [2], [1], [3], [2] ] )
		
		s = griddlers.Solver(griddlers.strategies.NaiveStrategy)
		with pytest.raises(ValueError) as ex:
			res = s.solve(b)
		assert 'strategy failure. illegal board' in str(ex.value)





